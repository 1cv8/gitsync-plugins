#Использовать logos
#Использовать v8find
#Использовать tempfiles

Перем Лог;
Перем Обработчик;
Перем КомандыПлагина;

Перем РабочийКаталогIBCMD;   // Строка, путь к рабочему каталогу утилиты ibcmd
Перем ТипСУБД;               //   ТипСУБД - Строка - тип сервера базы данных
Перем СерверБД;              //   СерверБД - Строка - адрес сервера базы данных
Перем ИмяБД;                 //   ИмяБД - Строка - имя базы данных
Перем ПользовательБД;        //   ПользовательБД - Строка - имя пользователя базы данных
Перем ПарольБД;              //   ПарольБД - Строка - пароль пользователя базы данных


#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "1.0.0";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин включает использование утилиты ibcmd для выгрузки конфигурации в файлы";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Плагин включает использование утилиты ibcmd для выгрузки конфигурации в файлы";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "use-ibcmd";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.gitsync.plugins.useIbcmd";
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ПриАктивизации(СтандартныйОбработчик) Экспорт

	Обработчик = СтандартныйОбработчик;

	РабочийКаталогIBCMD = "";
	ТипСУБД             = "MSSQLServer";
	СерверБД            = "localhost";
	ИмяБД               = "";
	ПользовательБД      = "sa";
	ПарольБД            = "";

КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	Лог.Отладка("Ищу команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);

	КлассРеализации.Опция("d ibcmd-data", "", "[*use-ibcmd] рабочий каталог утилиты ibcmd")
	               .Флаговый()
	               .ВОкружении("GITSYNC_IBCMD_DATA");

	КлассРеализации.Опция("t ibcmd-dbms", "MSSQLServer", "[*use-ibcmd] тип СУБД (при использовании ibcmd)")
	               .ТСтрока()
	               .ВОкружении("GITSYNC_IBCMD_DBMS");

	КлассРеализации.Опция("s ibcmd-db-server", "", "[*use-ibcmd] адрес сервера базы данных (при использовании ibcmd)")
	               .ТСтрока()
	               .ВОкружении("GITSYNC_IBCMD_DB_SERVER");

	КлассРеализации.Опция("n ibcmd-db-name", "", "[*use-ibcmd] имя базы данных (при использовании ibcmd)")
	               .ТСтрока()
	               .ВОкружении("GITSYNC_IBCMD_DB_NAME");

	КлассРеализации.Опция("U ibcmd-db-user", "", "[*use-ibcmd] имя пользователя базы данных (при использовании ibcmd)")
	               .ТСтрока()
	               .ВОкружении("GITSYNC_IBCMD_DB_USER");

	КлассРеализации.Опция("P ibcmd-db-pwd", "", "[*use-ibcmd] пароль пользователя базы данных (при использовании ibcmd)")
	               .ТСтрока()
	               .ВОкружении("GITSYNC_IBCMD_DB_PWD");

КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

	РабочийКаталогIBCMD = ПараметрыКоманды.Параметр("ibcmd-data", "");
	ТипСУБД             = ПараметрыКоманды.Параметр("ibcmd-dbms", "MSSQLServer");
	СерверБД            = ПараметрыКоманды.Параметр("ibcmd-db-server", "localhost");
	ИмяБД               = ПараметрыКоманды.Параметр("ibcmd-db-name", "");
	ПользовательБД      = ПараметрыКоманды.Параметр("ibcmd-db-user", "sa");
	ПарольБД            = ПараметрыКоманды.Параметр("ibcmd-db-pwd", "");

КонецПроцедуры

Процедура ПриВыгрузкеКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	Лог.Информация("Используем утилиту ibcmd для выгрузки конфигурации в файлы");

	Попытка
		ВыгрузитьКонфигурациюВФайлыIBCMD(Конфигуратор, КаталогВыгрузки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка("Невозможно выгрузить конфигурацию в файлы. Ошибка:%1%2", Символы.ПС, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

Процедура Инициализация()

	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

КонецПроцедуры

#Область Вспомогательные_процедуры_и_функции

// Процедура - выполняет выгрузку конфигурации в файлы с использованием утилиты ibcmd
//
// Параметры:
//   Конфигуратор       - УправлениеКонфигуратором    - объект управления конфигуратором (v8runner)
//   КаталогВыгрузки    - Строка                      - каталог для выгрузки файлов конфигурации
//
Процедура ВыгрузитьКонфигурациюВФайлыIBCMD(Знач Конфигуратор, Знач КаталогВыгрузки)

	КонтекстКонфигуратора = Конфигуратор.ПолучитьКонтекст();
	
	СтрокаСоединения = КонтекстКонфигуратора.КлючСоединенияСБазой;
	Пользователь     = КонтекстКонфигуратора.ИмяПользователя;
	Пароль           = КонтекстКонфигуратора.Пароль;
	
	ИмяРасширения = Обработчик.ПолучитьИмяРасширения();

	ПутьКIBCMD = Платформа1С.ПутьКIBCMD(Обработчик.ТекущаяВерсияПлатформы);

	СервернаяБаза = Ложь;
	ПутьКБД = "";

	Если Лев(СтрокаСоединения, 2) = "/F" Тогда
		ПутьКБД = СокрЛП(Сред(СтрокаСоединения, 3));
	ИначеЕсли Лев(СтрокаСоединения, 2) = "/S" Тогда
		СервернаяБаза = Истина;
		ЧастиПути = СтрРазделить(Сред(СтрокаСоединения, 3), "\", Ложь);
		Если НЕ ЗначениеЗаполнено(СерверБД) Тогда
			СерверБД = СокрЛП(ЧастиПути[0]);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяБД) И ЧастиПути.Количество() > 1 Тогда
			ИмяБД = СокрЛП(ЧастиПути[1]);
		КонецЕсли;
	Иначе
		ПутьКБД = Конфигуратор.ПутьКВременнойБазе();
	КонецЕсли;

	КомандаIBCMD = Новый Команда;
	КомандаIBCMD.УстановитьКоманду(ПутьКIBCMD);
	КомандаIBCMD.ПоказыватьВыводНемедленно(Истина);
	КомандаIBCMD.УстановитьКодировкуВывода("UTF-8");
	КомандаIBCMD.ДобавитьПараметр("infobase config export");	

	Если ЗначениеЗаполнено(РабочийКаталогIBCMD) Тогда
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--data=%1", РабочийКаталогIBCMD));
	КонецЕсли;
	Если СервернаяБаза Тогда
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--dbms=%1", ТипСУБД));
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--db-server=%1", СерверБД));
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--db-name=%1", ИмяБД));
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--db-user=%1", ПользовательБД));
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--db-pwd=%1", ПарольБД));
	Иначе
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--db-path=%1", ПутьКБД));
	КонецЕсли;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--user=%1", Пользователь));
		Если ЗначениеЗаполнено(Пароль) Тогда
			КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--pwd=%1", Пароль));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		КомандаIBCMD.ДобавитьПараметр(СтрШаблон("--extension=%1", ИмяРасширения));
	КонецЕсли;
	КомандаIBCMD.ДобавитьПараметр("--force");

	ФайлКонфигурации = Новый Файл(ОбъединитьПути(КаталогВыгрузки, "Configuration.xml"));
	Если ФайлКонфигурации.Существует() Тогда
		КомандаIBCMD.ДобавитьПараметр("--sync");
	КонецЕсли;

	КомандаIBCMD.ДобавитьПараметр(КаталогВыгрузки);
	
	КодВозврата = КомандаIBCMD.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = КомандаIBCMD.ПолучитьВывод();
		Лог.КритичнаяОшибка("Не удалось выгрузить конфигурацию в файлы с использованием IBCMD:%1%2",
		                    Символы.ПС,
		                    ТекстОшибки);
	КонецЕсли;

КонецПроцедуры // ВыгрузитьКонфигурациюВФайлыIBCMD()

#КонецОбласти

Инициализация();
