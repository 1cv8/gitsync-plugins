#Использовать logos
#Использовать gitsync

Перем Лог;              //   Лог                 - объект протоколирования (logger)
Перем Обработчик;       //   Команда             - обработчик текущей команды gitsync
Перем КомандыПлагина;   //   Массив из Строка    - список команд к которым подключается текущий плагин
Перем ТекущаяКоманда;   //   Строка              - имя выполняемой команды gitsync

Перем ЗакоммититьФайлИгнорируемыхИзменений;   //   Булево    - Истина - закоммитить файл .gitignore.

#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "1.0.0";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин удаляет информацию о поддержке.
	        |Удаляет файлы конфигураций поставщика поддержки (*.cf) и очищает файл настроек поддержки (ParentConfiguration.bin).";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Плагин удаляет информацию о поддержке.
	        |Удаляет файлы конфигураций поставщика поддержки (*.cf) и очищает файл настроек поддержки (ParentConfiguration.bin).";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "drop-support";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат СтрШаблон("oscript.lib.gitsync.plugins.%1", Имя());
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ПриАктивизации(СтандартныйОбработчик) Экспорт

	Обработчик = СтандартныйОбработчик;

КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	ТекущаяКоманда = ИмяКоманды;

	Лог.Отладка("Ищу команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

КонецПроцедуры

Процедура ПередВыгрузкойКонфигурациюВИсходники(Конфигуратор,
                                               КаталогРабочейКопии,
                                               КаталогВыгрузки,
                                               ПутьКХранилищу,
                                               НомерВерсии) Экспорт

	УдалитьИнформациюОПоддержке(КаталогРабочейКопии);

КонецПроцедуры

Процедура ПослеВыгрузкиКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки) Экспорт

	УдалитьИнформациюОПоддержке(КаталогВыгрузки);

КонецПроцедуры

Процедура ПередКоммитом(КаталогРабочейКопии, Комментарий, Автор, Дата) Экспорт

	КорневойКаталогГит = КорневойКаталогГит(КаталогРабочейКопии);

	Если НЕ ЗначениеЗаполнено(КорневойКаталогГит) Тогда
		Лог.Предупреждение("Каталог ""%1"" не является репозитарием git!", КаталогРабочейКопии);
		Возврат;
	КонецЕсли;

	КаталогПоддержки           = ОбъединитьПути(КаталогРабочейКопии, "Ext", "ParentConfigurations");
	ФайлИгнорируемыхИзменений  = Новый Файл(ОбъединитьПути(КорневойКаталогГит, ".gitignore"));
	ТекстИгнорируемыхИзменений = Новый ТекстовыйДокумент();

	Если ФайлИгнорируемыхИзменений.Существует() И ФайлИгнорируемыхИзменений.ЭтоФайл() Тогда
		ТекстИгнорируемыхИзменений.Прочитать(ФайлИгнорируемыхИзменений.ПолноеИмя);
	КонецЕсли;

	ОтносительныйПуть = СтрШаблон("%1%2*.cf",
	                              СтрЗаменить(КаталогПоддержки, КорневойКаталогГит, ""),
	                              ПолучитьРазделительПути());

	Для НомерСтроки = 1 По ТекстИгнорируемыхИзменений.КоличествоСтрок() Цикл
		ТекСтрока = ТекстИгнорируемыхИзменений.ПолучитьСтроку(НомерСтроки);
		Если СтрНайти(ТекСтрока, ОтносительныйПуть) > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

	ТекстИгнорируемыхИзменений.ДобавитьСтроку(ОтносительныйПуть);
	ТекстИгнорируемыхИзменений.Записать(ФайлИгнорируемыхИзменений.ПолноеИмя);

	ЗакоммититьФайлИгнорируемыхИзменений = Истина;

КонецПроцедуры

Процедура ПриКоммите(ГитРепозиторий,
                     Комментарий,
                     ПроиндексироватьОтслеживаемыеФайлы,
                     ИмяФайлаКомментария,
                     АвторДляГит,
                     ДатаДляГит,
                     Коммитер,
                     ДатаКоммитера) Экспорт

	Если НЕ ЗакоммититьФайлИгнорируемыхИзменений Тогда
		Возврат;
	КонецЕсли;

	РабочийКаталог     = ГитРепозиторий.ПолучитьРабочийКаталог();
	КорневойКаталогГит = КорневойКаталогГит(РабочийКаталог);

	Если НЕ ЗначениеЗаполнено(КорневойКаталогГит) Тогда
		Лог.Предупреждение("Каталог ""%1"" не является репозитарием git!", РабочийКаталог);
		Возврат;
	КонецЕсли;

	ФайлИгнорируемыхИзменений = Новый Файл(ОбъединитьПути(КорневойКаталогГит, ".gitignore"));
	
	ПараметрыКомандыГит = Новый Массив();
	ПараметрыКомандыГит.Добавить("add");
	ПараметрыКомандыГит.Добавить("-A");
	ПараметрыКомандыГит.Добавить(ФайлИгнорируемыхИзменений.ПолноеИмя);

	ГитРепозиторий.ВыполнитьКоманду(ПараметрыКомандыГит);

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

// Функция возвращает путь к корневому каталогу репозитария git
//
// Параметры:
//   КаталогРабочейКопии    - Строка    - проверяемый каталог
//
// Возвращаемое значение:
//   Строка - путь к корневому каталогу репозитария git
//            если пустая строка, то каталог не является репозитарием git
//
Функция КорневойКаталогГит(Знач КаталогРабочейКопии)

	ТекущийКаталог = Новый Файл(КаталогРабочейКопии);

	ЭтоКорневойКаталог = (ТекущийКаталог.ПолноеИмя = "/"
	                 ИЛИ Прав(ТекущийКаталог.ПолноеИмя, 1) = ":"
	                 ИЛИ Прав(ТекущийКаталог.ПолноеИмя, 2) = ":/"
	                 ИЛИ Прав(ТекущийКаталог.ПолноеИмя, 2) = ":\");

	Если ЭтоКорневойКаталог Тогда
		Возврат "";
	КонецЕсли;

	СлужебныйКаталогГит = Новый Файл(ОбъединитьПути(ТекущийКаталог.ПолноеИмя, ".git"));

	Если СлужебныйКаталогГит.Существует() И СлужебныйКаталогГит.ЭтоКаталог() Тогда
		Возврат ТекущийКаталог.ПолноеИмя;
	Иначе
		Возврат КорневойКаталогГит(ТекущийКаталог.Путь);
	КонецЕсли;

КонецФункции // КорневойКаталогГит()

// Процедура удаляет файлы конфигураций поставщика (*.cf)
// и очищает информацию о поддержке в файле ParentConfigurations.bin
//
// Параметры:
//   КаталогРабочейКопии    - Строка    - обрабатываемый каталог
//
Процедура УдалитьИнформациюОПоддержке(КаталогРабочейКопии)

	КаталогОбщихДанныхКонфигурации = ОбъединитьПути(КаталогРабочейКопии, "Ext");
	КаталогПоддержки               = ОбъединитьПути(КаталогОбщихДанныхКонфигурации, "ParentConfigurations");
	ФайлыПоставщика                = НайтиФайлы(КаталогПоддержки, "*.cf");

	Для Каждого ТекФайлПоставщика Из ФайлыПоставщика Цикл
		Лог.Отладка("Удаляем файл поставщика ""%1"".", ТекФайлПоставщика.ПолноеИмя);
		УдалитьФайлы(ТекФайлПоставщика.ПолноеИмя);
	КонецЦикла;

	ФайлПоддержки  = Новый Файл(ОбъединитьПути(КаталогОбщихДанныхКонфигурации, "ParentConfigurations.bin"));
	ТекстПоддержки = Новый ТекстовыйДокумент();
	Если ФайлПоддержки.Существует() И ФайлПоддержки.ЭтоФайл() Тогда
		ТекстПоддержки.Прочитать(ФайлПоддержки.ПолноеИмя);
	КонецЕсли;

	Если ТекстПоддержки.КоличествоСтрок() = 1 Тогда
		ТекСтрока = ТекстПоддержки.ПолучитьСтроку(1);
		Если СтрНайти(ТекСтрока, ТекстОтключеннойПоддержки()) > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекстПоддержки.УстановитьТекст(ТекстОтключеннойПоддержки());
	ТекстПоддержки.Записать(ФайлПоддержки.ПолноеИмя);
	Лог.Отладка("Отключена поддержка в файле ""%1"".", ФайлПоддержки.ПолноеИмя);

КонецПроцедуры // УдалитьИнформациюОПоддержке()

// Функция возвращает текст файла ParentConfigurations.bin для отключения поддержки
//
// Возвращаемое значение:
//   Строка    - текст файла ParentConfigurations.bin для отключения поддержки
//
Функция ТекстОтключеннойПоддержки()

	Возврат "{6,0,0,0,1,0}";

КонецФункции // ТекстОтключеннойПоддержки()

#КонецОбласти

Процедура Инициализация()

	Лог = Логирование.ПолучитьЛог(ИмяЛога());

	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

	ЗакоммититьФайлИгнорируемыхИзменений = Ложь;

КонецПроцедуры

Инициализация();
